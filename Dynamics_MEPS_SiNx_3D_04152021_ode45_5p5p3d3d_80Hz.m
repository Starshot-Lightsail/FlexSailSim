%% Numerical evolution of coupled differential equations for rigid and
% composite round lightsails
% Equations of motions of 2nd order are rewritten in vector form
% Ramon Gao, April 16, 2021

% Major revisions on 03/28/21: Corrected equations of motion to account for
% 3-1-2 rotation sequence instead of 1-2-3, which affects equations for the
% accelerations AND the Euler angle rates. Note that using the 3-2-1
% rotation sequence would require rerunning the COMSOL simulations, since
% these were run based on 1-2-3, which psi = 0, so the order of rotating
% first around the x axis and then around the y axis is important!

% Initialization
% Close all figures, clear command window, clear all stored variables

%close all
%clear
%clc
clear textprogressbar

% Save simulation results (1) or not (0)
dosave = 1;

% Set material of lightsail to be 'SOI' or 'SiNx'
material = 'SiNx2';

% Euler sequence: integer, can be 123 or 312
global euler_seq
euler_seq = 123;

% Sail shape: string, 'round' or 'square'
shape = 'round';

% Plot parameters
fontsize = 16;

% Global parameters
c0 = 299792458; % [c0] = m/s, speed of light
I0 = 1;     % [I0] = 1, normalized light intensity
D = 1;      % [D] = 1, normalized diameter of lightsail
m = 1;      % [m] = 1, normalized mass

% Beam width, determines stability
w = 0.5*D;    % [w] = 1, normalized beam width

%% General parameters and settings

% Orientation of gratings in their local frames
beta = [0, pi, pi/2, 3*pi/2];

% Position of boundary separating unpatterned and patterned regions
if strcmpi(shape,'round')
    sx = 0*1/10; % [sx] = 1, unitless, actual position is [sx*D] = m
elseif strcmpi(shape,'square')
    sx = 1/4; % [sx] = 1, unitless, actual position is [sx*D] = m
end

% Distribution of regions 1 and 2 on lightsail area
n = 4;  % number of wedges/pie slices
na = 2; % number of wedges/pie slices being region A
nb = n - na; % number of wedges/pie slices being region B

% Define radial boundaries of all regions/patterns (for angular boundaries,
% see below, since these are material-specific)
if strcmpi(shape,'round')
    
    r_start_R1 = sx.*D;
    r_start_R2 = r_start_R1;
    r_start_R3 = r_start_R1;
    r_start_R4 = r_start_R1;
    
    r_stop_R1 = D./2;
    r_stop_R2 = r_stop_R1;
    r_stop_R3 = r_stop_R1;
    r_stop_R4 = r_stop_R1;
    
elseif strcmpi(shape,'square')
    
    x_start_R1 = sx.*D;
    x_start_R2 = -D./2;
    x_start_R3 = -sx.*D;
    x_start_R4 = -sx.*D;
    
    y_start_R1 = -D./2;
    y_start_R2 = -D./2;
    y_start_R3 = 0;
    y_start_R4 = -D./2;
    
    x_stop_R1 = D./2;
    x_stop_R2 = -sx.*D;
    x_stop_R3 = sx.*D;
    x_stop_R4 = sx.*D;
    
    y_stop_R1 = D./2;
    y_stop_R2 = D./2;
    y_stop_R3 = D./2;
    y_stop_R4 = 0;
    
end

%% Define and calculate material-specific parameters

if strcmpi(material,'SOI')
    
    % Define densities of substrate and resonating elements
    rho_s = 2200*1e-6; % [rho] = kg/m^2/um, density of silica
    rho_e = 3100*1e-6; % [rho] = kg/m^2/um, density of silicon
    
    % Define design parameters of unit cells A and B
    dA = 1.8; % [dA] = um, size of unit cell A
    dB = 1.775; % [dB] = um, size of unit cell B
    w1A = 0.15*dA; % [w1A] = um, width of first resonator in region A
    w2A = 0.35*dA; % [w2A] = um, width of second resonator in region A
    w1B = 0.125*dB; % [w1B] = um, width of first resonator in region B
    w2B = 0.25*dB; % [w2B] = um, width of second resonator in region B
    
    tA = 0.5; % [ts] = um, thickness of substrate in region A
    hA = 0.5; % [hr] = um, height of resonators in region A
    tB = tA; % [ts] = um, thickness of substrate in region B
    hB = 0.45; % [hr] = um, height of resonators in region B
    
    % Define the mass per unit area of each region (unpatterned, A or B)
    chi0 = rho_s*tA;
    chiA = rho_s*tA + rho_e*hB*(w1A + w2A);
    chiB = rho_s*tA + rho_e*hB*(w1B + w2B);
    
    % Define the total mass of the round lightsail, normalized by D^2
    mass = (1/n)*pi*(1/4 - sx^2)*(chiA*na + chiB*nb) + chi0*pi*sx^2;
    
    
    
    
    % Define boundaries of all regions for a round lightsail
    if strcmpi(shape,'round')
        varphi_start_R1 = -pi/4;
        varphi_stop_R1 = -varphi_start_R1;
        varphi_start_R2 = pi - abs(varphi_stop_R1);
        varphi_stop_R2 = pi + abs(varphi_stop_R1);
        varphi_start_R3 = varphi_stop_R1;
        varphi_stop_R3 = varphi_start_R2;
        varphi_start_R4 = varphi_stop_R2;
        varphi_stop_R4 = 2*pi - abs(varphi_stop_R1);
    end
    
elseif strcmpi(material,'SiNx') || strcmpi(material,'SiNx1') || strcmpi(material,'SiNx2')
    
    % Define density of substrate and resonating elements
    rho_SiNx = 3100*1e-6; % [rho] = kg/m^2/um, density of silicon nitride
    rho_s = rho_SiNx; % [rho] = kg/m^2/um
    rho_e = rho_SiNx; % [rho] = kg/m^2/um
    
    % Define design parameters of unit cells A and B
    w1A = 0.10; % [w1A] = um, width of first resonator in region A
    w2A = 0.24; % [w2A] = um, width of second resonator in region A
    w1B = 0.12; % [w1B] = um, width of first resonator in region B
    w2B = 0.30; % [w2B] = um, width of second resonator in region B
    
    tA = 0.1; % [ts] = um, thickness of substrate
    hA = 0.2; % [hr] = um, height of resonators
    tB = 0.1; % [ts] = um, thickness of substrate
    hB = 0.2; % [hr] = um, height of resonators
    
    % Define the mass per unit area of each region (unpatterned, A or B)
    chi0 = rho_s*tA;
    chiA = rho_s*tA + rho_e*hA*(w1A + w2A);
    chiB = rho_s*tB + rho_e*hB*(w1B + w2B);
    
    if strcmpi(shape,'round')
        
        % Define the total mass of the round lightsail, normalized by D^2
        mass = (1/n)*pi*(1/4 - sx^2)*(chiA*na + chiB*nb) + chi0*pi*sx^2;
        
        %warning('Stupid fix applied here to enable comparisons to prior flex sims')
        %mass = mass * 200/176;  % increase mass to correspond to previously simulated thing
        
        
        % Define boundaries of all regions/patterns for a round lightsail
        
        varphi_start_R1 = -pi/4;%-pi/6;
        varphi_stop_R1 = -varphi_start_R1;
        varphi_start_R2 = pi - abs(varphi_stop_R1);
        varphi_stop_R2 = pi + abs(varphi_stop_R1);
        varphi_start_R3 = varphi_stop_R1;
        varphi_stop_R3 = varphi_start_R2;
        varphi_start_R4 = varphi_stop_R2;
        varphi_stop_R4 = 2*pi - abs(varphi_stop_R1);
        
    elseif strcmpi(shape,'sqiare') %lol
        
        % Define the total mass of the round lightsail, normalized by D^2
        mass = 2*(chiA*(1/2-sx) + chiB*sx);
        
        
    end
    
end

if strcmpi(shape,'round')
    
    % Define integrands for mass integration to get moments of inertia of a
    % round lightsail
    integrand_Ix = @(varphi,r) r.^2 .* ((sin(varphi)).^2) .* r;
    integrand_Iy = @(varphi,r) r.^2 .* ((cos(varphi)).^2) .* r;
    
    Ix_eval = chi0 * integral2(integrand_Ix,0,2*pi,0,sx.*D) + ...
        chiA .* ( ...
        integral2(integrand_Ix,varphi_start_R1,varphi_stop_R1,r_start_R1,r_stop_R1) + ...
        integral2(integrand_Ix,varphi_start_R2,varphi_stop_R2,r_start_R2,r_stop_R2)) + ...
        chiB .* ( ...
        integral2(integrand_Ix,varphi_start_R3,varphi_stop_R3,r_start_R3,r_stop_R3) + ...
        integral2(integrand_Ix,varphi_start_R4,varphi_stop_R4,r_start_R4,r_stop_R4));
    
    Iy_eval = chi0 * integral2(integrand_Iy,0,2*pi,0,sx.*D) + ...
        chiA .* ( ...
        integral2(integrand_Iy,varphi_start_R1,varphi_stop_R1,r_start_R1,r_stop_R1) + ...
        integral2(integrand_Iy,varphi_start_R2,varphi_stop_R2,r_start_R2,r_stop_R2)) + ...
        chiB .* ( ...
        integral2(integrand_Iy,varphi_start_R3,varphi_stop_R3,r_start_R3,r_stop_R3) + ...
        integral2(integrand_Iy,varphi_start_R4,varphi_stop_R4,r_start_R4,r_stop_R4));
    
elseif strcmpi(shape,'square')
    
    Ix_eval = (chiA.*(1/2 - sx) + chiB.*sx) .* D.^4/6;
    Iy_eval = (chiA./12 + 2.*(chiB - chiA).*sx.^3/3) .* D.^4;
    
end

% Define prefactors for moments of inertias to be multiplied with m*D^2
prefactor_Ix = Ix_eval / mass;
prefactor_Iy = Iy_eval / mass;
prefactor_Iz = prefactor_Ix + prefactor_Iy;

% Define moments of inertia in normalzed units, i.e. in terms of m and D
Ix = prefactor_Ix .* m .* D.^2;
Iy = prefactor_Iy .* m .* D.^2;
Iz = prefactor_Iz .* m .* D.^2;

%% Load pressures

% Load collection of smaller look-up tables of pressures versus roll (phi)
% and phi (theta) angles for TE (region A) and TM polarization (region B)

%global pressure_TE_collection_small_tables
%global pressure_TM_collection_small_tables

% Load splitted smaller look-up tables of pressures vs roll and pitch
% angles for TE- and TM-polarized light. All the small look-up tables for
% TE (TM) polarization combined together yield the full look-up table for
% TE (TM) polarization. The full look-up table is being splitted into
% smaller ones to increase speed of finding pressures within the table
% later in the code

if strcmpi(material,'SOI')
    
    file_name_collection_small_tables = ...
        '04032021_MEPS_SOI_Oggy_ReducedPitchRoll_Pressures_CollectionTables_';
    
    load([fullfile('Data',file_name_collection_small_tables) 'TE.mat'])
    load([fullfile('Data',file_name_collection_small_tables) 'TM.mat'])
    
elseif strcmpi(material,'SiNx1')
    
    file_name_collection_small_tables = ...
        '03222021_MEPS_SiNx_Mark6e1_ReducedPitchRoll_Pressures_CollectionTables_';
    
    load([fullfile('Data',file_name_collection_small_tables) 'TE.mat'])
    load([fullfile('Data',file_name_collection_small_tables) 'TM.mat'])
    
elseif strcmpi(material,'SiNx2')
    
    file_name_collection_small_tables = ...
        '04052021_MEPS_SiNx_Mark6e2_ReducedPitchRoll_Pressures_CollectionTables_';
    
    load([fullfile('Data',file_name_collection_small_tables) 'TE.mat'])
    load([fullfile('Data',file_name_collection_small_tables) 'TM.mat'])
    
end

pressure_TE_collection_small_tables = pressure_TE_small_tables;
pressure_TM_collection_small_tables = pressure_TM_small_tables;

%% Assign important boundary phi angles

% Assign pressures in local x and z direction to vectors

dim_collection_small_tables = size(pressure_TE_small_tables);

collection_phi_angles_tmp = zeros(dim_collection_small_tables(3), ...
    dim_collection_small_tables(1));

global last_indices_tables
global num_small_tables

num_small_tables = dim_collection_small_tables(3);

last_indices_tables = zeros(1,num_small_tables);

for ii = 1:1:num_small_tables
    
    tmp = [];
    last_indices_tables(ii) = find(pressure_TE_small_tables(:,1,ii),1,'last');
    tmp = unique(pressure_TE_small_tables(1:last_indices_tables(ii),1,ii));
    collection_phi_angles_tmp(ii,1:length(tmp)) = tmp;
    
end

max_len_collection_phi_angles = 0;

for ii = 1:1:dim_collection_small_tables(3)
    if find(collection_phi_angles_tmp(ii,:),1,'last') > max_len_collection_phi_angles
        max_len_collection_phi_angles = find(collection_phi_angles_tmp(ii,:),1,'last');
    end
end

collection_phi_angles = zeros(num_small_tables, max_len_collection_phi_angles);

last_indices_angles = zeros(1,num_small_tables);

for ii = 1:1:num_small_tables
    
    last_indices_angles(ii) = find(collection_phi_angles_tmp(ii,:),1,'last');
    collection_phi_angles(ii,1:last_indices_angles(ii)) = ...
        collection_phi_angles_tmp(ii,1:last_indices_angles(ii));
    
end

global border_angles

first_angles = collection_phi_angles(:,1);
step_angles = abs(collection_phi_angles(:,1) - collection_phi_angles(:,2));

last_angles = zeros(size(first_angles));
for ii = 1:1:length(last_indices_angles)
    last_angles(ii) = collection_phi_angles(ii,last_indices_angles(ii));
end

border_angles = (last_angles(1:end-1) + first_angles(2:end))/2;

%% Definition of integrated auxiliary intensity functions

if euler_seq == 312
    
    % Euler rotation sequence 3-1-2 (z-x'-y'')
    if strcmpi(shape,'round')
        
        integrandForce = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+(-1).*r.*cos(phi).*cos(varphi).*sin( ...
            psi)+r.*cos(phi).*cos(psi).*sin(varphi)).^2+(xc+r.*cos(varphi).*( ...
            cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).*sin(theta))+r.*( ...
            cos(theta).*sin(psi)+cos(psi).*sin(phi).*sin(theta)).*sin(varphi)) ...
            .^2+(r.*cos(varphi).*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+r.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta)).*sin(varphi)).^2)).*r;
        
        integrandTorqueX = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+(-1).*r.*cos(phi).*cos(varphi).*sin( ...
            psi)+r.*cos(phi).*cos(psi).*sin(varphi)).^2+(xc+r.*cos(varphi).*( ...
            cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).*sin(theta))+r.*( ...
            cos(theta).*sin(psi)+cos(psi).*sin(phi).*sin(theta)).*sin(varphi)) ...
            .^2+(r.*cos(varphi).*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+r.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta)).*sin(varphi)).^2)).*r.^2.*sin(varphi);
        
        integrandTorqueY = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+(-1).*r.*cos(phi).*cos(varphi).*sin( ...
            psi)+r.*cos(phi).*cos(psi).*sin(varphi)).^2+(xc+r.*cos(varphi).*( ...
            cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).*sin(theta))+r.*( ...
            cos(theta).*sin(psi)+cos(psi).*sin(phi).*sin(theta)).*sin(varphi)) ...
            .^2+(r.*cos(varphi).*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+r.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta)).*sin(varphi)).^2)).*r.^2.*cos(varphi);
        
    elseif strcmpi(shape,'square')
        
        integrandForce = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+yb.*cos(phi).*cos(psi)+(-1).*xb.*cos( ...
            phi).*sin(psi)).^2+(xb.*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+yb.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta))).^2+(xc+yb.*(cos(theta).*sin(psi)+cos(psi).*sin(phi).* ...
            sin(theta))+xb.*(cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).* ...
            sin(theta))).^2));
        
        integrandTorqueX = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+yb.*cos(phi).*cos(psi)+(-1).*xb.*cos( ...
            phi).*sin(psi)).^2+(xb.*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+yb.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta))).^2+(xc+yb.*(cos(theta).*sin(psi)+cos(psi).*sin(phi).* ...
            sin(theta))+xb.*(cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).* ...
            sin(theta))).^2)).*yb;
        
        integrandTorqueY = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((yc+yb.*cos(phi).*cos(psi)+(-1).*xb.*cos( ...
            phi).*sin(psi)).^2+(xb.*(cos(theta).*sin(phi).*sin(psi)+cos(psi).* ...
            sin(theta))+yb.*((-1).*cos(psi).*cos(theta).*sin(phi)+sin(psi).* ...
            sin(theta))).^2+(xc+yb.*(cos(theta).*sin(psi)+cos(psi).*sin(phi).* ...
            sin(theta))+xb.*(cos(psi).*cos(theta)+(-1).*sin(phi).*sin(psi).* ...
            sin(theta))).^2)).*xb;
        
    end
    
elseif euler_seq == 123
    
    % Euler rotation sequence 1-2-3 (x-y'-z'')
    if strcmpi(shape,'round')
        
        integrandForce = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((r.*cos(varphi).*sin(theta)+(-1).*r.*cos( ...
            theta).*sin(phi).*sin(varphi)).^2+(xc+r.*cos(psi).*cos(theta).* ...
            cos(varphi)+r.*(cos(phi).*sin(psi)+cos(psi).*sin(phi).*sin(theta)) ...
            .*sin(varphi)).^2+(yc+(-1).*r.*cos(theta).*cos(varphi).*sin(psi)+ ...
            r.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)).*sin( ...
            varphi)).^2)).*r;
        
        integrandTorqueX = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((r.*cos(varphi).*sin(theta)+(-1).*r.*cos( ...
            theta).*sin(phi).*sin(varphi)).^2+(xc+r.*cos(psi).*cos(theta).* ...
            cos(varphi)+r.*(cos(phi).*sin(psi)+cos(psi).*sin(phi).*sin(theta)) ...
            .*sin(varphi)).^2+(yc+(-1).*r.*cos(theta).*cos(varphi).*sin(psi)+ ...
            r.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)).*sin( ...
            varphi)).^2)).*r.^2.*sin(varphi);
        
        integrandTorqueY = @(r,varphi,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*((r.*cos(varphi).*sin(theta)+(-1).*r.*cos( ...
            theta).*sin(phi).*sin(varphi)).^2+(xc+r.*cos(psi).*cos(theta).* ...
            cos(varphi)+r.*(cos(phi).*sin(psi)+cos(psi).*sin(phi).*sin(theta)) ...
            .*sin(varphi)).^2+(yc+(-1).*r.*cos(theta).*cos(varphi).*sin(psi)+ ...
            r.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)).*sin( ...
            varphi)).^2)).*r.^2.*cos(varphi);
        
    elseif strcmpi(shape,'square')
        
        integrandForce = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*(((-1).*yb.*cos(theta).*sin(phi)+xb.*sin( ...
            theta)).^2+(xc+xb.*cos(psi).*cos(theta)+yb.*(cos(phi).*sin(psi)+ ...
            cos(psi).*sin(phi).*sin(theta))).^2+(yc+(-1).*xb.*cos(theta).*sin( ...
            psi)+yb.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)) ...
            ).^2));
        
        integrandTorqueX = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*(((-1).*yb.*cos(theta).*sin(phi)+xb.*sin( ...
            theta)).^2+(xc+xb.*cos(psi).*cos(theta)+yb.*(cos(phi).*sin(psi)+ ...
            cos(psi).*sin(phi).*sin(theta))).^2+(yc+(-1).*xb.*cos(theta).*sin( ...
            psi)+yb.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)) ...
            ).^2)).*yb;
        
        integrandTorqueY = @(xb,yb,xc,yc,psi,theta,phi) ...
            exp(1).^((-2).*w.^(-2).*(((-1).*yb.*cos(theta).*sin(phi)+xb.*sin( ...
            theta)).^2+(xc+xb.*cos(psi).*cos(theta)+yb.*(cos(phi).*sin(psi)+ ...
            cos(psi).*sin(phi).*sin(theta))).^2+(yc+(-1).*xb.*cos(theta).*sin( ...
            psi)+yb.*(cos(phi).*cos(psi)+(-1).*sin(phi).*sin(psi).*sin(theta)) ...
            ).^2)).*xb;
        
    end
    
end

%% Definition of forces and torques
imimpatient = 1e-5;
impatient2 = 1e-9;  % this didn't help.
if strcmpi(shape,'round')
    
    FxBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( cos(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    FxBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( cos(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        cos(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient )  );
    
    FyBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( sin(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    FyBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( sin(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        sin(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    FzBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    FzBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandForce(r,varphi,xc,yc,0,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    funtorquex = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueX(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueX(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueX(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueX(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
    funtorquey = @(xc,yc,psi,theta,phi) -cos(theta).*cos(phi).*I0.* ...
        (c0/(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueY(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R1,r_stop_R1,varphi_start_R1,varphi_stop_R1, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueY(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R2,r_stop_R2,varphi_start_R2,varphi_stop_R2, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueY(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R3,r_stop_R3,varphi_start_R3,varphi_stop_R3, 'AbsTol', impatient2, 'RelTol', imimpatient ) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(r,varphi) integrandTorqueY(r,varphi,xc,yc,psi,theta,phi), ...
        r_start_R4,r_stop_R4,varphi_start_R4,varphi_stop_R4, 'AbsTol', impatient2, 'RelTol', imimpatient ) );
    
elseif strcmpi(shape,'square')
    
    FxBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( cos(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        cos(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        cos(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        cos(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    FxBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( cos(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        cos(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        cos(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        cos(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    FyBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( sin(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        sin(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        sin(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        sin(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    FyBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        ( sin(beta(1)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        sin(beta(2)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        sin(beta(3)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        sin(beta(4)).*findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'px_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    FzBodyFrame = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    FzBodyFrameRB = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandForce(xb,yb,xc,yc,0,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    funtorquex = @(xc,yc,psi,theta,phi) cos(theta).*cos(phi).*I0.* ...
        (c0./(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueX(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueX(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueX(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueX(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
    funtorquey = @(xc,yc,psi,theta,phi) -cos(theta).*cos(phi).*I0.* ...
        (c0/(I0.*D.^2)).* ...
        (findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R1',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueY(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R1,x_stop_R1,y_start_R1,y_stop_R1) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R2',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueY(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R2,x_stop_R2,y_start_R2,y_stop_R2) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R3',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueY(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R3,x_stop_R3,y_start_R3,y_stop_R3) + ...
        findpressurep(pressure_TE_collection_small_tables, pressure_TM_collection_small_tables, 'pz_R4',[phi,theta,psi]).* ...
        integral2(@(xb,yb) integrandTorqueY(xb,yb,xc,yc,psi,theta,phi), ...
        x_start_R4,x_stop_R4,y_start_R4,y_stop_R4) );
    
end

%% Main code

% Calculate time constant
I0_actual = 1e9; % in W/m^2

radiusmm = 450;
D_actual = 2*radiusmm/1000; % in m
t0 = sqrt((mass*(D_actual^2))*c0/I0_actual/D_actual);

% Set spinning speed to 80 Hz to match flexible lightsail simulations
spinning_freq = 800; % Hz, baseline 80
omega_z_0 = 2*pi*spinning_freq*t0;

disp(['Actual diameter: ' num2str(D_actual) ' meters']); 
M_actual = mass*D_actual^2;
disp(['Actual mass: ' num2str(mass*D_actual^2) ' kg']); 

% Define function that describes the equations of the system in vector form

if euler_seq == 312
    
    f = @(t,u) [u(7);
        u(8);
        u(9);
        
        -sin(u(5)).*sec(u(6)).*u(10) + cos(u(5)).*sec(u(6)).*u(12);
        sin(u(5)).*tan(u(6)).*u(10) + u(11) - cos(u(5)).*tan(u(6)).*u(12);
        cos(u(5)).*u(10) + sin(u(5)).*u(12);
        
        FxBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*cos(u(5)) - sin(u(4)).*sin(u(5)).*sin(u(6))) - ...
        FyBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        sin(u(4)).*cos(u(6)) + ...
        FzBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*sin(u(5)) + sin(u(4)).*cos(u(5)).*sin(u(6)));
        
        FxBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        (sin(u(4)).*cos(u(5)) + cos(u(4)).*sin(u(5)).*sin(u(6))) + ...
        FyBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        cos(u(4)).*cos(u(6)) + ...
        FzBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        (sin(u(4)).*sin(u(5)) - cos(u(4)).*cos(u(5)).*sin(u(6)));
        
        FxBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        (-sin(u(5)).*cos(u(6))) + ...
        FyBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        sin(u(6)) + ...
        FzBodyFrame(u(1)*cos(u(4)) + u(2)*sin(u(4)),-u(1)*sin(u(4)) + u(2)*cos(u(4)),u(4),u(5),u(6)) .* ...
        cos(u(5)).*cos(u(6));
        
        ((Iy - Iz).*u(11).*u(12) + funtorquex(u(1),u(2),u(4),u(5),u(6)))./Ix;
        ((Iz - Ix).*u(10).*u(12) + funtorquey(u(1),u(2),u(4),u(5),u(6)))./Iy;
        (0*(Ix - Iy).*u(10).*u(11) + 0)./Iz
        ];
    
elseif euler_seq == 123
    
    f = @(t,u) [u(7);
        u(8);
        u(9);
        
        -cos(u(4)).*tan(u(5)).*u(10) + sin(u(4)).*tan(u(5)).*u(11) + u(12);
        sin(u(4)).*u(10) + cos(u(4)).*u(11);
        cos(u(4)).*sec(u(5)).*u(10) - sin(u(4)).*sec(u(5)).*u(11);
        
        FxBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*cos(u(5))) + ...
        FyBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*sin(u(5)).*sin(u(6)) + sin(u(4)).*cos(u(6))) + ...
        FzBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*sin(u(5)).*cos(u(6)) - sin(u(4)).*sin(u(6)));
        FxBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (-sin(u(4)).*cos(u(5))) + ...
        FyBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (cos(u(4)).*cos(u(6)) - sin(u(4)).*sin(u(5)).*sin(u(6))) + ...
        FzBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (-cos(u(4)).*sin(u(6)) - sin(u(4)).*sin(u(5)).*cos(u(6)));
        FxBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        (-sin(u(5))) + ...
        FyBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        cos(u(5)).*sin(u(6)) + ...
        FzBodyFrame(u(1),u(2),u(4),u(5),u(6)) .* ...
        cos(u(5)).*cos(u(6));
        
        ((Iy - Iz).*u(11).*u(12) + funtorquex(u(1),u(2),u(4),u(5),u(6)))./Ix;
        ((Iz - Ix).*u(10).*u(12) + funtorquey(u(1),u(2),u(4),u(5),u(6)))./Iy;
        ((Ix - Iy).*u(10).*u(11) + 0)./Iz
        ];
    
end

% Define initial conditions according to
% '1' : moderate initial condition
% '2' : extreme initial condition
% '3' : sweep over different initial conditions

initialcond = '1';

if initialcond == '1'
    u0 = [0.05*D; 0.05*D; 0; 0; deg2rad(0); deg2rad(0); 0; 0; 0; 0; 0; omega_z_0];
    
    % Convert initial pitch and roll to 3-1-2 rotation sequence if
    % necessary
    if euler_seq == 312
        R31_tmp = cos(u0(4)).*sin(u0(5)) + cos(u0(5)).*sin(u0(6)).*sin(u0(4));
        R32_tmp = -cos(u0(5)).*cos(u0(4)).*sin(u0(4)) + sin(u0(5)).*sin(u0(4));
        R33_tmp = cos(u0(5)).*cos(u0(4));
        
        u0(5) = asin(R31_tmp);
        u0(6) = -atan2(R32_tmp./cos(u0(5)),R33_tmp./cos(u0(5)));
    end
    
elseif initialcond == '2'
    u0 = [0.05*D; 0.05*D; 0; 0; 0; 0; 0; 0; 0; 0; 0; omega_z_0];
elseif initialcond == '3'
    
    numInitialConditions = 3;
    
    u0mat = zeros(numInitialConditions,12);
    
    u0mat(1,:) = [0.02*D; 0.02*D; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2*pi*1*t0];
    u0mat(2,:) = [0.05*D; 0.05*D; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2*pi*1*t0];
    u0mat(3,:) = [0.05*D; 0.05*D; 0; 0; 0; 0; 0; 0; 0; 0; 0; 2*pi*50*t0];
    
end

tstart = 0;

if initialcond == '1' || initialcond == '2'
    tend = 100;
elseif initialcond == '3'
    tend = 1;
end

%% Calculate force-torque pairs as in figure 4c in [OIlic2019]

if 0
    
    theta_list = -15:1:15;
    theta_list = deg2rad(theta_list);
    phi_list = theta_list;
    
    fx = zeros(size(theta_list));
    fy = zeros(size(theta_list));
    tx = zeros(size(theta_list));
    ty = zeros(size(theta_list));
    
    for ii = 1:1:length(theta_list)
        fx(ii) = cos(theta_list(ii)) .* FxBodyFrame(0,0,0,theta_list(ii),0) + ...
            sin(theta_list(ii)) .* FzBodyFrame(0,0,0,theta_list(ii),0);
        fy(ii) = cos(phi_list(ii)) .* FyBodyFrame(0,0,0,0,phi_list(ii)) - ...
            sin(phi_list(ii)) .* FzBodyFrame(0,0,0,0,phi_list(ii));
        tx(ii) = funtorquex(0,0,0,0,phi_list(ii));
        ty(ii) = funtorquey(0,0,0,theta_list(ii),0);
    end
    
    figure(1)
    plot(100*tan(theta_list),fx)
    hold on
    plot(100*tan(theta_list),10*ty)
    xlim([-21, 21])
    ylim([-0.62, 0.62])
    
    figure(2)
    plot(100*tan(theta_list),fy)
    hold on
    plot(100*tan(theta_list),10*tx)
    xlim([-21, 21])
    ylim([-0.62, 0.62])
    
end

%% Single Simulation
if 1
    
    rel_tol = 1e-7;
    abs_tol = rel_tol;
    
    % options = odeset('MaxStep',0.01,'OutputFcn',@odeprog,'Events',@odeabort);
    % options = odeset('RelTol',rel_tol,'AbsTol',abs_tol,'OutputFcn',@odetpbar);
    options = odeset('OutputFcn',@odetpbar);
    % options = odeset('OutputFcn',@odetpbar);
    
    tic
    [t,u] = ode45(f,[tstart tend],u0,options);
    toc
    
    linewidth = 2;
    
    % figure(1)
    % plot(t(:,1),u(:,1),'Linewidth',linewidth)
    % hold on
    % plot(t(:,1),u(:,2),'Linewidth',linewidth)
    % xlabel('\it{t}/\it{t}_{0}')
    % ylabel('\it{x/D}, \it{y/D}')
    % title('Displacement')
    
    % figure(2)
    % % plot(t(:,1),100.*tan(u(:,5)),'Linewidth',linewidth)
    % % title('tan(\theta)')
    % plot(t(:,1),rad2deg(u(:,5)),'Linewidth',linewidth)
    % xlabel('\it{t}/\it{t}_{0}')
    % ylabel('\theta (°)')
    % title('Pitch')
    %
    % figure(3)
    % plot(t(:,1),rad2deg(u(:,6)),'Linewidth',linewidth)
    % xlabel('\it{t}/\it{t}_{0}')
    % ylabel('\phi (°)')
    % title('Roll')
    %
    figure(4)
    plot(t(:,1),rad2deg(mod(u(:,4),2*pi)),'Linewidth',linewidth)
    xlabel('\it{t}/\it{t}_{0}')
    ylabel('\psi (°)')
    title('Yaw')
    
    figure(5)
    plot(u(:,1),u(:,2),'Linewidth',linewidth)
    xlabel('\it{x/D}')
    ylabel('\it{y/D}')
    % axis([-1.5*max(u0(1),u0(2)) 1.5*max(u0(1),u0(2)) ...
    %     -1.5*max(u0(1),u0(2)) 1.5*max(u0(1),u0(2))])
    title('Trajectory')
    
    tstepmax = max(t(2:end) - t(1:end-1));
    fprintf('Maximum time step taken by ode: %f\n',tstepmax);
    
    statevec = [ t u];
    
    if initialcond == '1' && dosave == 1
        save('MEPS_04162021_SiNx_Mark6e2_3D_123_5p5p3d3d_80Hz_t100_2D_ode45_states.mat','statevec');
    elseif initialcond == '2' && dosave == 1
        save('MEPS_02232021_SiNx_Mark3_3D_5p5p_50Hz_states.mat','statevec');
    end
    
end



%% CHAOS
FxLabFrames = zeros(1,length(u));
FyLabFrames = zeros(1,length(u));
FzLabFrames = zeros(1,length(u));
Tq1 = zeros(1,length(u));
Tq2 = zeros(1,length(u));
Tq3 = zeros(1,length(u));
tic
parfor nn = 1:length(u)
    disp([num2str(nn) '/' num2str(length(u))]);
    
    FxLabFrames(nn) = FxBodyFrame(u(nn,1),u(nn,2),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (cos(u(nn,4)).*cos(u(nn,5))) + ...
        FyBodyFrame(u(nn,1),u(nn,2),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (cos(u(nn,4)).*sin(u(nn,5)).*sin(u(nn,6)) + sin(u(nn,4)).*cos(u(nn,6))) + ...
        FzBodyFrame(u(nn,1),u(nn,2),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (cos(u(nn,4)).*sin(u(nn,5)).*cos(u(nn,6)) - sin(u(nn,4)).*sin(u(nn,6)));
    
    FyLabFrames(nn) = FxBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (sin(u(nn,4)).*cos(u(nn,5)) + cos(u(nn,4)).*sin(u(nn,5)).*sin(u(nn,6))) + ...
        FyBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        cos(u(nn,4)).*cos(u(nn,6)) + ...
        FzBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (sin(u(nn,4)).*sin(u(nn,5)) - cos(u(nn,4)).*cos(u(nn,5)).*sin(u(nn,6)));
    
    FzLabFrames(nn) = FxBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        (-sin(u(nn,5)).*cos(u(nn,6))) + ...
        FyBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        sin(u(nn,6)) + ...
        FzBodyFrame(u(nn,1)*cos(u(nn,4)) + u(nn,2)*sin(u(nn,4)),-u(nn,1)*sin(u(nn,4)) + u(nn,2)*cos(u(nn,4)),u(nn,4),u(nn,5),u(nn,6)) .* ...
        cos(u(nn,5)).*cos(u(nn,6));
    
    Tq1(nn) =     ((Iy - Iz).*u(nn,11).*u(nn,12) + funtorquex(u(nn,1),u(nn,2),u(nn,4),u(nn,5),u(nn,6)))./Ix;
    Tq2(nn) =     ((Iz - Ix).*u(nn,10).*u(nn,12) + funtorquey(u(nn,1),u(nn,2),u(nn,4),u(nn,5),u(nn,6)))./Iy;
    Tq3(nn) =     (0*(Ix - Iy).*u(nn,10).*u(nn,11) + 0)./Iz;
    
end
toc

% Auxiliary functions

function [pressure] = findpressure( p,angle0)
% Function to find a simulated tilt angle that is closed to the
% numerically evolved angle by means of minimum Euclidean distance

%global pressure_TE_collection_small_tables
%global pressure_TM_collection_small_tables

global last_indices_tables
global border_angles
global num_small_tables

global euler_seq

if euler_seq == 312
    
    R31 = cos(angle0(3)).*sin(angle0(2)) + cos(angle0(2)).*sin(angle0(1)).*sin(angle0(3));
    R32 = -cos(angle0(2)).*cos(angle0(3)).*sin(angle0(1)) + sin(angle0(2)).*sin(angle0(3));
    R33 = cos(angle0(2)).*cos(angle0(1));
    % R21 = -cos(angle0(1)).*sin(angle0(3));
    % R11 = cos(angle0(2)).*cos(angle0(3)) - sin(angle0(2)).*sin(angle0(1)).*sin(angle0(3));
    
    theta123 = asin(R31);
    phi123 = -atan2(R32./cos(theta123),R33./cos(theta123));
    % psi123 = -atan2(R21./cos(theta123),R11./cos(theta123));
    
elseif euler_seq == 123
    
    theta123 = angle0(2);
    phi123 = angle0(1);
    
end

if strcmpi(p,'px_R1')
    if phi123 < border_angles(1)
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(1),1:2,1), [phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,3,1);
    elseif phi123 >= border_angles(end)
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables),[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,3,num_small_tables);
    elseif (border_angles(1) <= phi123) && (phi123 < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= phi123) & ...
            (phi123 < border_angles(2:end)) == 1);
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,3,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'px_R2')
    if (-phi123) < border_angles(1)
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(1),1:2,1), -[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,3,1);
    elseif (-phi123) >= border_angles(end)
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables), -[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,3,num_small_tables);
    elseif (border_angles(1) <= (-phi123)) && ((-phi123) < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= (-phi123)) & ...
            ((-phi123) < border_angles(2:end)) == 1);
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),-[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,3,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'px_R3')
    if phi123 < border_angles(1)
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(1),1:2,1), [phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,3,1);
    elseif phi123 >= border_angles(end)
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables),[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,3,num_small_tables);
    elseif (border_angles(1) <= phi123) && (phi123 < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= phi123) & ...
            (phi123 < border_angles(2:end)) == 1);
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,3,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'px_R4')
    if (-phi123) < border_angles(1)
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(1),1:2,1), -[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,3,1);
    elseif (-phi123) >= border_angles(end)
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables), -[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,3,num_small_tables);
    elseif (border_angles(1) <= (-phi123)) && ((-phi123) < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= (-phi123)) & ...
            ((-phi123) < border_angles(2:end)) == 1);
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),-[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,3,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'pz_R1')
    if phi123 < border_angles(1)
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(1),1:2,1), [phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,4,1);
    elseif phi123 >= border_angles(end)
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables),[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,4,num_small_tables);
    elseif (border_angles(1) <= phi123) && (phi123 < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= phi123) & ...
            (phi123 < border_angles(2:end)) == 1);
        idx_R1 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R1,4,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'pz_R2')
    if (-phi123) < border_angles(1)
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(1),1:2,1), -[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,4,1);
    elseif (-phi123) >= border_angles(end)
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables), -[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,4,num_small_tables);
    elseif (border_angles(1) <= (-phi123)) && ((-phi123) < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= (-phi123)) & ...
            ((-phi123) < border_angles(2:end)) == 1);
        idx_R2 = knnsearch(pressure_TE_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),-[phi123, theta123]);
        pressure = pressure_TE_collection_small_tables(idx_R2,4,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'pz_R3')
    if phi123 < border_angles(1)
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(1),1:2,1), [phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,4,1);
    elseif phi123 >= border_angles(end)
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables),[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,4,num_small_tables);
    elseif (border_angles(1) <= phi123) && (phi123 < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= phi123) & ...
            (phi123 < border_angles(2:end)) == 1);
        idx_R3 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R3,4,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
elseif strcmpi(p,'pz_R4')
    if (-phi123) < border_angles(1)
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(1),1:2,1), -[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,4,1);
    elseif (-phi123) >= border_angles(end)
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(end),1:2,num_small_tables), -[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,4,num_small_tables);
    elseif (border_angles(1) <= (-phi123)) && ((-phi123) < border_angles(end))
        idx_small_table = find((border_angles(1:end-1) <= (-phi123)) & ...
            ((-phi123) < border_angles(2:end)) == 1);
        idx_R4 = knnsearch(pressure_TM_collection_small_tables(1:last_indices_tables(idx_small_table+1),1:2,idx_small_table+1),-[phi123, theta123]);
        pressure = pressure_TM_collection_small_tables(idx_R4,4,idx_small_table+1);
    else
        warning('Error: angle out of range!');
    end
end

end